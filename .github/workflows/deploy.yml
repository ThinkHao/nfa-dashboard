name: 构建与发布

on:
  push:
    tags:
      - 'v*'  # 当推送标签时触发，例如 v1.0.0
  workflow_dispatch:  # 允许手动触发

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      - uses: actions/checkout@v4
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'frontend/frontend/package-lock.json'
      
      - name: 安装前端依赖
        working-directory: ./frontend/frontend
        run: npm ci
      
      - name: 构建前端
        working-directory: ./frontend/frontend
        run: npm run build-only
      
      - name: 设置 Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: true
      
      - name: 获取后端依赖
        working-directory: ./backend
        run: go mod download
      
      - name: 构建后端
        working-directory: ./backend
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=${{ matrix.arch }} go build -o nfa-dashboard-backend main.go
      
      - name: 获取版本号
        id: get_version
        run: |
          # 从标签获取版本号，如果有标签
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            # 如果没有标签，使用时间戳
            VERSION=dev-$(date +'%Y%m%d%H%M')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "版本号: $VERSION"
      
      - name: 准备部署文件
        run: |
          mkdir -p dist/frontend
          mkdir -p dist/backend/config
          mkdir -p dist/scripts
          
          # 复制前端构建产物
          cp -r frontend/frontend/dist/* dist/frontend/
          
          # 复制后端构建产物
          cp backend/nfa-dashboard-backend dist/backend/
          
          # 复制配置文件模板（兼容无 config.yaml 的环境变量启动）
          if [ -f backend/config/config.yaml ]; then
            cp backend/config/config.yaml dist/backend/config/config.yaml.template
          else
            printf "%s\n" \
              "# This file is optional. Backend also supports environment variables." \
              "server:" \
              "  port: 8081" \
              "" \
              "database:" \
              "  host: \"\"" \
              "  port: 3306" \
              "  username: \"\"" \
              "  password: \"\"" \
              "  dbname: \"\"" \
              "" \
              "auth:" \
              "  secret: \"\"" \
              "  access_token_ttl_minutes: 60" \
              "  refresh_token_ttl_minutes: 43200" \
              "" \
              "binding:" \
              "  allowed_sales_roles: []" \
              "  allowed_line_roles: []" \
              "  allowed_node_roles: []" \
              "" \
              "rates_owner_roles:" \
              "  customer_fee: []" \
              "  network_line_fee: []" \
              > dist/backend/config/config.yaml.template
          fi
          
          # 复制部署脚本
          cp scripts/deploy.sh dist/scripts/
          chmod +x dist/scripts/deploy.sh
          
          # 创建带版本号的压缩包
          PACKAGE_NAME=nfa-dashboard-${{ steps.get_version.outputs.VERSION }}-linux-${{ matrix.arch }}
          tar -czvf ${PACKAGE_NAME}.tar.gz -C dist .
      
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: nfa-dashboard-${{ steps.get_version.outputs.VERSION }}-linux-${{ matrix.arch }}
          path: nfa-dashboard-${{ steps.get_version.outputs.VERSION }}-linux-${{ matrix.arch }}.tar.gz
          retention-days: 1

  docker-images:
    if: ${{ false }}
    needs: build-linux
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: 设置 QEMU
        uses: docker/setup-qemu-action@v3

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录 GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 获取版本号与仓库
        id: meta
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=dev-$(date +'%Y%m%d%H%M')
          fi
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "OWNER_LC=$OWNER_LC" >> $GITHUB_OUTPUT

      - name: 构建并推送 Backend 镜像 (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ steps.meta.outputs.OWNER_LC }}/nfa-dashboard-backend:${{ steps.meta.outputs.VERSION }}
            ghcr.io/${{ steps.meta.outputs.OWNER_LC }}/nfa-dashboard-backend:latest

      - name: 构建并推送 Frontend 镜像 (multi-arch)
        uses: docker/build-push-action@v6
        with:
          context: ./frontend/frontend
          file: ./frontend/frontend/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ steps.meta.outputs.OWNER_LC }}/nfa-dashboard-frontend:${{ steps.meta.outputs.VERSION }}
            ghcr.io/${{ steps.meta.outputs.OWNER_LC }}/nfa-dashboard-frontend:latest

  docker-offline-images:
    needs: build-linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 获取版本号
        id: meta
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=dev-$(date +'%Y%m%d%H%M')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: 构建 Backend 镜像 (amd64)
        run: |
          docker build -t nfa-dashboard-backend:${{ steps.meta.outputs.VERSION }} ./backend

      - name: 构建 Frontend 镜像 (amd64)
        run: |
          docker build -t nfa-dashboard-frontend:${{ steps.meta.outputs.VERSION }} ./frontend/frontend

      - name: 导出离线镜像
        run: |
          mkdir -p artifacts
          docker save -o artifacts/nfa-dashboard-backend-image-linux-amd64.tar nfa-dashboard-backend:${{ steps.meta.outputs.VERSION }}
          docker save -o artifacts/nfa-dashboard-frontend-image-linux-amd64.tar nfa-dashboard-frontend:${{ steps.meta.outputs.VERSION }}

      - name: 上传离线镜像产物
        uses: actions/upload-artifact@v4
        with:
          name: offline-images-amd64
          path: artifacts/*
          retention-days: 7

  offline-bundle-amd64:
    needs: build-linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 获取版本号
        id: meta
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=dev-$(date +'%Y%m%d%H%M')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: 构建离线镜像 (amd64)
        run: |
          docker build -t nfa-dashboard-backend:${{ steps.meta.outputs.VERSION }} ./backend
          docker build -t nfa-dashboard-frontend:${{ steps.meta.outputs.VERSION }} ./frontend/frontend

      - name: 组装离线包
        run: |
          set -euo pipefail
          VERSION=${{ steps.meta.outputs.VERSION }}
          BUNDLE="nfa-offline-bundle-${VERSION}-linux-amd64"
          mkdir -p "${BUNDLE}/compose/nginx" "${BUNDLE}/scripts"
          # 复制 Compose 离线文件与示例环境
          cp compose/docker-compose.offline.yml "${BUNDLE}/compose/docker-compose.offline.yml"
          cp compose/.env.example "${BUNDLE}/compose/.env.example"
          cp compose/nginx/nginx.conf "${BUNDLE}/compose/nginx/nginx.conf"
          # 生成 compose/.env 并写入 IMAGE_TAG
          cp "${BUNDLE}/compose/.env.example" "${BUNDLE}/compose/.env"
          if grep -q '^IMAGE_TAG=' "${BUNDLE}/compose/.env"; then
            sed -i.bak "s/^IMAGE_TAG=.*/IMAGE_TAG=${VERSION}/" "${BUNDLE}/compose/.env" && rm -f "${BUNDLE}/compose/.env.bak"
          else
            echo "IMAGE_TAG=${VERSION}" >> "${BUNDLE}/compose/.env"
          fi
          # 复制离线脚本
          cp scripts/offline-deploy.sh "${BUNDLE}/scripts/offline-deploy.sh"
          cp scripts/offline-rollback.sh "${BUNDLE}/scripts/offline-rollback.sh"
          chmod +x "${BUNDLE}/scripts/offline-deploy.sh" "${BUNDLE}/scripts/offline-rollback.sh"
          # 生成 bundle.yaml 元数据
          cat > "${BUNDLE}/bundle.yaml" <<'EOF'
          version: v1
          app:
            name: nfa-dashboard
            release: __VERSION__
          images:
            - name: nfa-dashboard-backend
              tag: __VERSION__
            - name: nfa-dashboard-frontend
              tag: __VERSION__
          env:
            required:
              - DB_HOST
              - DB_USER
              - DB_PASS
              - DB_NAME
              - AUTH_SECRET
          health:
            endpoint: /health
          rollback:
            keep_releases: 2
          EOF
          sed -i.bak "s/__VERSION__/${VERSION}/g" "${BUNDLE}/bundle.yaml" && rm -f "${BUNDLE}/bundle.yaml.bak"
          # 导出合并镜像
          docker save nfa-dashboard-backend:${VERSION} nfa-dashboard-frontend:${VERSION} | gzip > "${BUNDLE}/images-amd64.tar.gz"
          # 生成校验文件
          (cd "${BUNDLE}" && sha256sum images-amd64.tar.gz compose/docker-compose.offline.yml compose/.env.example bundle.yaml scripts/offline-deploy.sh scripts/offline-rollback.sh > sha256sums.txt)
          # 打包 ZIP
          zip -r "${BUNDLE}.zip" "${BUNDLE}"

      - name: 上传离线包
        uses: actions/upload-artifact@v4
        with:
          name: offline-bundle-amd64
          path: nfa-offline-bundle-${{ steps.meta.outputs.VERSION }}-linux-amd64.zip
          retention-days: 7

  create-release:
    needs: [build-linux, docker-offline-images, offline-bundle-amd64]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: 获取版本号
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: 准备 compose 发布包
        run: |
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          VERSION=${{ steps.get_version.outputs.VERSION }}
          BUNDLE=nfa-dashboard-bundle-${VERSION}
          mkdir -p ${BUNDLE}/compose ${BUNDLE}/compose/nginx ${BUNDLE}/sql/dist
          cp -r compose/docker-compose.yml ${BUNDLE}/compose/
          cp -r compose/docker-compose.prod.yml ${BUNDLE}/compose/
          cp -r compose/docker-compose.offline.yml ${BUNDLE}/compose/
          cp -r compose/.env.example ${BUNDLE}/compose/
          # 生成 .env 并自动写入 IMAGE_TAG=VERSION
          cp ${BUNDLE}/compose/.env.example ${BUNDLE}/compose/.env
          if grep -q '^IMAGE_TAG=' ${BUNDLE}/compose/.env; then
            sed -i.bak "s/^IMAGE_TAG=.*/IMAGE_TAG=${VERSION}/" ${BUNDLE}/compose/.env && rm -f ${BUNDLE}/compose/.env.bak
          else
            echo "IMAGE_TAG=${VERSION}" >> ${BUNDLE}/compose/.env
          fi
          cp -r compose/nginx/nginx.conf ${BUNDLE}/compose/nginx/nginx.conf
          cp -r compose/README-RUNBOOK.md ${BUNDLE}/
          cp -r sql/dist/install_full.sql ${BUNDLE}/sql/dist/
          printf "ghcr.io/%s/nfa-dashboard-backend:%s\n" "$OWNER_LC" "$VERSION" > "${BUNDLE}/IMAGES.txt"
          printf "ghcr.io/%s/nfa-dashboard-frontend:%s\n" "$OWNER_LC" "$VERSION" >> "${BUNDLE}/IMAGES.txt"
          zip -r ${BUNDLE}.zip ${BUNDLE}

      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
      
      - name: 创建 Release
        uses: softprops/action-gh-release@v1
        with:
          name: NFA Dashboard ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: |
            nfa-dashboard-${{ steps.get_version.outputs.VERSION }}-linux-amd64/nfa-dashboard-${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz
            nfa-dashboard-${{ steps.get_version.outputs.VERSION }}-linux-arm64/nfa-dashboard-${{ steps.get_version.outputs.VERSION }}-linux-arm64.tar.gz
            nfa-dashboard-bundle-${{ steps.get_version.outputs.VERSION }}.zip
            offline-images-amd64/nfa-dashboard-backend-image-linux-amd64.tar
            offline-images-amd64/nfa-dashboard-frontend-image-linux-amd64.tar
            offline-bundle-amd64/nfa-offline-bundle-${{ steps.get_version.outputs.VERSION }}-linux-amd64.zip
